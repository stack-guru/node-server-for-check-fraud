{"version":3,"file":"static/js/9704.72a6ca64.chunk.js","mappings":"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","sources":["../node_modules/@fullcalendar/list/internal.js","../node_modules/@fullcalendar/list/index.js"],"sourcesContent":["import { BaseComponent, getUniqueDomId, getDateMeta, buildNavLinkAttrs, ContentContainer, getDayClassNames, formatDayString, createFormatter, EventContainer, getSegAnchorAttrs, isMultiDayRange, buildSegTimeText, DateComponent, memoize, ViewContainer, Scroller, NowTimer, sortEventSegs, getSegMeta, sliceEventStore, intersectRanges, startOfDay, addDays } from '@fullcalendar/core/internal';\nimport { createElement, Fragment } from '@fullcalendar/core/preact';\n\nclass ListViewHeaderRow extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            textId: getUniqueDomId(),\n        };\n    }\n    render() {\n        let { theme, dateEnv, options, viewApi } = this.context;\n        let { cellId, dayDate, todayRange } = this.props;\n        let { textId } = this.state;\n        let dayMeta = getDateMeta(dayDate, todayRange);\n        // will ever be falsy?\n        let text = options.listDayFormat ? dateEnv.format(dayDate, options.listDayFormat) : '';\n        // will ever be falsy? also, BAD NAME \"alt\"\n        let sideText = options.listDaySideFormat ? dateEnv.format(dayDate, options.listDaySideFormat) : '';\n        let renderProps = Object.assign({ date: dateEnv.toDate(dayDate), view: viewApi, textId,\n            text,\n            sideText, navLinkAttrs: buildNavLinkAttrs(this.context, dayDate), sideNavLinkAttrs: buildNavLinkAttrs(this.context, dayDate, 'day', false) }, dayMeta);\n        // TODO: make a reusable HOC for dayHeader (used in daygrid/timegrid too)\n        return (createElement(ContentContainer, { elTag: \"tr\", elClasses: [\n                'fc-list-day',\n                ...getDayClassNames(dayMeta, theme),\n            ], elAttrs: {\n                'data-date': formatDayString(dayDate),\n            }, renderProps: renderProps, generatorName: \"dayHeaderContent\", customGenerator: options.dayHeaderContent, defaultGenerator: renderInnerContent, classNameGenerator: options.dayHeaderClassNames, didMount: options.dayHeaderDidMount, willUnmount: options.dayHeaderWillUnmount }, (InnerContent) => ( // TODO: force-hide top border based on :first-child\n        createElement(\"th\", { scope: \"colgroup\", colSpan: 3, id: cellId, \"aria-labelledby\": textId },\n            createElement(InnerContent, { elTag: \"div\", elClasses: [\n                    'fc-list-day-cushion',\n                    theme.getClass('tableCellShaded'),\n                ] })))));\n    }\n}\nfunction renderInnerContent(props) {\n    return (createElement(Fragment, null,\n        props.text && (createElement(\"a\", Object.assign({ id: props.textId, className: \"fc-list-day-text\" }, props.navLinkAttrs), props.text)),\n        props.sideText && ( /* not keyboard tabbable */createElement(\"a\", Object.assign({ \"aria-hidden\": true, className: \"fc-list-day-side-text\" }, props.sideNavLinkAttrs), props.sideText))));\n}\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n    hour: 'numeric',\n    minute: '2-digit',\n    meridiem: 'short',\n});\nclass ListViewEventRow extends BaseComponent {\n    render() {\n        let { props, context } = this;\n        let { options } = context;\n        let { seg, timeHeaderId, eventHeaderId, dateHeaderId } = props;\n        let timeFormat = options.eventTimeFormat || DEFAULT_TIME_FORMAT;\n        return (createElement(EventContainer, Object.assign({}, props, { elTag: \"tr\", elClasses: [\n                'fc-list-event',\n                seg.eventRange.def.url && 'fc-event-forced-url',\n            ], defaultGenerator: () => renderEventInnerContent(seg, context) /* weird */, seg: seg, timeText: \"\", disableDragging: true, disableResizing: true }), (InnerContent, eventContentArg) => (createElement(Fragment, null,\n            buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId),\n            createElement(\"td\", { \"aria-hidden\": true, className: \"fc-list-event-graphic\" },\n                createElement(\"span\", { className: \"fc-list-event-dot\", style: {\n                        borderColor: eventContentArg.borderColor || eventContentArg.backgroundColor,\n                    } })),\n            createElement(InnerContent, { elTag: \"td\", elClasses: ['fc-list-event-title'], elAttrs: { headers: `${eventHeaderId} ${dateHeaderId}` } })))));\n    }\n}\nfunction renderEventInnerContent(seg, context) {\n    let interactiveAttrs = getSegAnchorAttrs(seg, context);\n    return (createElement(\"a\", Object.assign({}, interactiveAttrs), seg.eventRange.def.title));\n}\nfunction buildTimeContent(seg, timeFormat, context, timeHeaderId, dateHeaderId) {\n    let { options } = context;\n    if (options.displayEventTime !== false) {\n        let eventDef = seg.eventRange.def;\n        let eventInstance = seg.eventRange.instance;\n        let doAllDay = false;\n        let timeText;\n        if (eventDef.allDay) {\n            doAllDay = true;\n        }\n        else if (isMultiDayRange(seg.eventRange.range)) { // TODO: use (!isStart || !isEnd) instead?\n            if (seg.isStart) {\n                timeText = buildSegTimeText(seg, timeFormat, context, null, null, eventInstance.range.start, seg.end);\n            }\n            else if (seg.isEnd) {\n                timeText = buildSegTimeText(seg, timeFormat, context, null, null, seg.start, eventInstance.range.end);\n            }\n            else {\n                doAllDay = true;\n            }\n        }\n        else {\n            timeText = buildSegTimeText(seg, timeFormat, context);\n        }\n        if (doAllDay) {\n            let renderProps = {\n                text: context.options.allDayText,\n                view: context.viewApi,\n            };\n            return (createElement(ContentContainer, { elTag: \"td\", elClasses: ['fc-list-event-time'], elAttrs: {\n                    headers: `${timeHeaderId} ${dateHeaderId}`,\n                }, renderProps: renderProps, generatorName: \"allDayContent\", customGenerator: options.allDayContent, defaultGenerator: renderAllDayInner, classNameGenerator: options.allDayClassNames, didMount: options.allDayDidMount, willUnmount: options.allDayWillUnmount }));\n        }\n        return (createElement(\"td\", { className: \"fc-list-event-time\" }, timeText));\n    }\n    return null;\n}\nfunction renderAllDayInner(renderProps) {\n    return renderProps.text;\n}\n\n/*\nResponsible for the scroller, and forwarding event-related actions into the \"grid\".\n*/\nclass ListView extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.computeDateVars = memoize(computeDateVars);\n        this.eventStoreToSegs = memoize(this._eventStoreToSegs);\n        this.state = {\n            timeHeaderId: getUniqueDomId(),\n            eventHeaderId: getUniqueDomId(),\n            dateHeaderIdRoot: getUniqueDomId(),\n        };\n        this.setRootEl = (rootEl) => {\n            if (rootEl) {\n                this.context.registerInteractiveComponent(this, {\n                    el: rootEl,\n                });\n            }\n            else {\n                this.context.unregisterInteractiveComponent(this);\n            }\n        };\n    }\n    render() {\n        let { props, context } = this;\n        let { dayDates, dayRanges } = this.computeDateVars(props.dateProfile);\n        let eventSegs = this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges);\n        return (createElement(ViewContainer, { elRef: this.setRootEl, elClasses: [\n                'fc-list',\n                context.theme.getClass('table'),\n                context.options.stickyHeaderDates !== false ?\n                    'fc-list-sticky' :\n                    '',\n            ], viewSpec: context.viewSpec },\n            createElement(Scroller, { liquid: !props.isHeightAuto, overflowX: props.isHeightAuto ? 'visible' : 'hidden', overflowY: props.isHeightAuto ? 'visible' : 'auto' }, eventSegs.length > 0 ?\n                this.renderSegList(eventSegs, dayDates) :\n                this.renderEmptyMessage())));\n    }\n    renderEmptyMessage() {\n        let { options, viewApi } = this.context;\n        let renderProps = {\n            text: options.noEventsText,\n            view: viewApi,\n        };\n        return (createElement(ContentContainer, { elTag: \"div\", elClasses: ['fc-list-empty'], renderProps: renderProps, generatorName: \"noEventsContent\", customGenerator: options.noEventsContent, defaultGenerator: renderNoEventsInner, classNameGenerator: options.noEventsClassNames, didMount: options.noEventsDidMount, willUnmount: options.noEventsWillUnmount }, (InnerContent) => (createElement(InnerContent, { elTag: \"div\", elClasses: ['fc-list-empty-cushion'] }))));\n    }\n    renderSegList(allSegs, dayDates) {\n        let { theme, options } = this.context;\n        let { timeHeaderId, eventHeaderId, dateHeaderIdRoot } = this.state;\n        let segsByDay = groupSegsByDay(allSegs); // sparse array\n        return (createElement(NowTimer, { unit: \"day\" }, (nowDate, todayRange) => {\n            let innerNodes = [];\n            for (let dayIndex = 0; dayIndex < segsByDay.length; dayIndex += 1) {\n                let daySegs = segsByDay[dayIndex];\n                if (daySegs) { // sparse array, so might be undefined\n                    let dayStr = formatDayString(dayDates[dayIndex]);\n                    let dateHeaderId = dateHeaderIdRoot + '-' + dayStr;\n                    // append a day header\n                    innerNodes.push(createElement(ListViewHeaderRow, { key: dayStr, cellId: dateHeaderId, dayDate: dayDates[dayIndex], todayRange: todayRange }));\n                    daySegs = sortEventSegs(daySegs, options.eventOrder);\n                    for (let seg of daySegs) {\n                        innerNodes.push(createElement(ListViewEventRow, Object.assign({ key: dayStr + ':' + seg.eventRange.instance.instanceId /* are multiple segs for an instanceId */, seg: seg, isDragging: false, isResizing: false, isDateSelecting: false, isSelected: false, timeHeaderId: timeHeaderId, eventHeaderId: eventHeaderId, dateHeaderId: dateHeaderId }, getSegMeta(seg, todayRange, nowDate))));\n                    }\n                }\n            }\n            return (createElement(\"table\", { className: 'fc-list-table ' + theme.getClass('table') },\n                createElement(\"thead\", null,\n                    createElement(\"tr\", null,\n                        createElement(\"th\", { scope: \"col\", id: timeHeaderId }, options.timeHint),\n                        createElement(\"th\", { scope: \"col\", \"aria-hidden\": true }),\n                        createElement(\"th\", { scope: \"col\", id: eventHeaderId }, options.eventHint))),\n                createElement(\"tbody\", null, innerNodes)));\n        }));\n    }\n    _eventStoreToSegs(eventStore, eventUiBases, dayRanges) {\n        return this.eventRangesToSegs(sliceEventStore(eventStore, eventUiBases, this.props.dateProfile.activeRange, this.context.options.nextDayThreshold).fg, dayRanges);\n    }\n    eventRangesToSegs(eventRanges, dayRanges) {\n        let segs = [];\n        for (let eventRange of eventRanges) {\n            segs.push(...this.eventRangeToSegs(eventRange, dayRanges));\n        }\n        return segs;\n    }\n    eventRangeToSegs(eventRange, dayRanges) {\n        let { dateEnv } = this.context;\n        let { nextDayThreshold } = this.context.options;\n        let range = eventRange.range;\n        let allDay = eventRange.def.allDay;\n        let dayIndex;\n        let segRange;\n        let seg;\n        let segs = [];\n        for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex += 1) {\n            segRange = intersectRanges(range, dayRanges[dayIndex]);\n            if (segRange) {\n                seg = {\n                    component: this,\n                    eventRange,\n                    start: segRange.start,\n                    end: segRange.end,\n                    isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\n                    isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\n                    dayIndex,\n                };\n                segs.push(seg);\n                // detect when range won't go fully into the next day,\n                // and mutate the latest seg to the be the end.\n                if (!seg.isEnd && !allDay &&\n                    dayIndex + 1 < dayRanges.length &&\n                    range.end <\n                        dateEnv.add(dayRanges[dayIndex + 1].start, nextDayThreshold)) {\n                    seg.end = range.end;\n                    seg.isEnd = true;\n                    break;\n                }\n            }\n        }\n        return segs;\n    }\n}\nfunction renderNoEventsInner(renderProps) {\n    return renderProps.text;\n}\nfunction computeDateVars(dateProfile) {\n    let dayStart = startOfDay(dateProfile.renderRange.start);\n    let viewEnd = dateProfile.renderRange.end;\n    let dayDates = [];\n    let dayRanges = [];\n    while (dayStart < viewEnd) {\n        dayDates.push(dayStart);\n        dayRanges.push({\n            start: dayStart,\n            end: addDays(dayStart, 1),\n        });\n        dayStart = addDays(dayStart, 1);\n    }\n    return { dayDates, dayRanges };\n}\n// Returns a sparse array of arrays, segs grouped by their dayIndex\nfunction groupSegsByDay(segs) {\n    let segsByDay = []; // sparse array\n    let i;\n    let seg;\n    for (i = 0; i < segs.length; i += 1) {\n        seg = segs[i];\n        (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = []))\n            .push(seg);\n    }\n    return segsByDay;\n}\n\nexport { ListView };\n","import { createPlugin } from '@fullcalendar/core';\nimport { ListView } from './internal.js';\nimport { identity, createFormatter, injectStyles } from '@fullcalendar/core/internal';\nimport '@fullcalendar/core/preact';\n\nconst OPTION_REFINERS = {\n    listDayFormat: createFalsableFormatter,\n    listDaySideFormat: createFalsableFormatter,\n    noEventsClassNames: identity,\n    noEventsContent: identity,\n    noEventsDidMount: identity,\n    noEventsWillUnmount: identity,\n    // noEventsText is defined in base options\n};\nfunction createFalsableFormatter(input) {\n    return input === false ? null : createFormatter(input);\n}\n\nvar css_248z = \":root{--fc-list-event-dot-width:10px;--fc-list-event-hover-bg-color:#f5f5f5}.fc-theme-standard .fc-list{border:1px solid var(--fc-border-color)}.fc .fc-list-empty{align-items:center;background-color:var(--fc-neutral-bg-color);display:flex;height:100%;justify-content:center}.fc .fc-list-empty-cushion{margin:5em 0}.fc .fc-list-table{border-style:hidden;width:100%}.fc .fc-list-table tr>*{border-left:0;border-right:0}.fc .fc-list-sticky .fc-list-day>*{background:var(--fc-page-bg-color);position:sticky;top:0}.fc .fc-list-table thead{left:-10000px;position:absolute}.fc .fc-list-table tbody>tr:first-child th{border-top:0}.fc .fc-list-table th{padding:0}.fc .fc-list-day-cushion,.fc .fc-list-table td{padding:8px 14px}.fc .fc-list-day-cushion:after{clear:both;content:\\\"\\\";display:table}.fc-theme-standard .fc-list-day-cushion{background-color:var(--fc-neutral-bg-color)}.fc-direction-ltr .fc-list-day-text,.fc-direction-rtl .fc-list-day-side-text{float:left}.fc-direction-ltr .fc-list-day-side-text,.fc-direction-rtl .fc-list-day-text{float:right}.fc-direction-ltr .fc-list-table .fc-list-event-graphic{padding-right:0}.fc-direction-rtl .fc-list-table .fc-list-event-graphic{padding-left:0}.fc .fc-list-event.fc-event-forced-url{cursor:pointer}.fc .fc-list-event:hover td{background-color:var(--fc-list-event-hover-bg-color)}.fc .fc-list-event-graphic,.fc .fc-list-event-time{white-space:nowrap;width:1px}.fc .fc-list-event-dot{border:calc(var(--fc-list-event-dot-width)/2) solid var(--fc-event-border-color);border-radius:calc(var(--fc-list-event-dot-width)/2);box-sizing:content-box;display:inline-block;height:0;width:0}.fc .fc-list-event-title a{color:inherit;text-decoration:none}.fc .fc-list-event.fc-event-forced-url:hover a{text-decoration:underline}\";\ninjectStyles(css_248z);\n\nvar index = createPlugin({\n    name: '@fullcalendar/list',\n    optionRefiners: OPTION_REFINERS,\n    views: {\n        list: {\n            component: ListView,\n            buttonTextKey: 'list',\n            listDayFormat: { month: 'long', day: 'numeric', year: 'numeric' }, // like \"January 1, 2016\"\n        },\n        listDay: {\n            type: 'list',\n            duration: { days: 1 },\n            listDayFormat: { weekday: 'long' }, // day-of-week is all we need. full date is probably in headerToolbar\n        },\n        listWeek: {\n            type: 'list',\n            duration: { weeks: 1 },\n            listDayFormat: { weekday: 'long' },\n            listDaySideFormat: { month: 'long', day: 'numeric', year: 'numeric' },\n        },\n        listMonth: {\n            type: 'list',\n            duration: { month: 1 },\n            listDaySideFormat: { weekday: 'long' }, // day-of-week is nice-to-have\n        },\n        listYear: {\n            type: 'list',\n            duration: { year: 1 },\n            listDaySideFormat: { weekday: 'long' }, // day-of-week is nice-to-have\n        },\n    },\n});\n\nexport { index as default };\n"],"names":["ListViewHeaderRow","arguments","state","textId","getUniqueDomId","this","context","theme","dateEnv","options","viewApi","props","cellId","dayDate","todayRange","dayMeta","getDateMeta","text","listDayFormat","format","sideText","listDaySideFormat","renderProps","Object","assign","date","toDate","view","navLinkAttrs","buildNavLinkAttrs","sideNavLinkAttrs","createElement","ContentContainer","elTag","elClasses","getDayClassNames","elAttrs","formatDayString","generatorName","customGenerator","dayHeaderContent","defaultGenerator","renderInnerContent","classNameGenerator","dayHeaderClassNames","didMount","dayHeaderDidMount","willUnmount","dayHeaderWillUnmount","InnerContent","scope","colSpan","id","getClass","BaseComponent","Fragment","className","DEFAULT_TIME_FORMAT","createFormatter","hour","minute","meridiem","ListViewEventRow","seg","timeHeaderId","eventHeaderId","dateHeaderId","timeFormat","eventTimeFormat","EventContainer","eventRange","def","url","interactiveAttrs","getSegAnchorAttrs","title","renderEventInnerContent","timeText","disableDragging","disableResizing","eventContentArg","displayEventTime","eventDef","eventInstance","instance","doAllDay","allDay","isMultiDayRange","range","isStart","buildSegTimeText","start","end","isEnd","allDayText","headers","allDayContent","renderAllDayInner","allDayClassNames","allDayDidMount","allDayWillUnmount","buildTimeContent","style","borderColor","backgroundColor","ListView","computeDateVars","memoize","eventStoreToSegs","_eventStoreToSegs","dateHeaderIdRoot","setRootEl","rootEl","registerInteractiveComponent","el","unregisterInteractiveComponent","dateProfile","dayDates","dayRanges","eventSegs","eventStore","eventUiBases","ViewContainer","elRef","stickyHeaderDates","viewSpec","Scroller","liquid","isHeightAuto","overflowX","overflowY","length","renderSegList","renderEmptyMessage","noEventsText","noEventsContent","renderNoEventsInner","noEventsClassNames","noEventsDidMount","noEventsWillUnmount","allSegs","segsByDay","segs","i","dayIndex","push","groupSegsByDay","NowTimer","unit","nowDate","innerNodes","daySegs","dayStr","key","sortEventSegs","eventOrder","instanceId","isDragging","isResizing","isDateSelecting","isSelected","getSegMeta","timeHint","eventHint","eventRangesToSegs","sliceEventStore","activeRange","nextDayThreshold","fg","eventRanges","eventRangeToSegs","segRange","intersectRanges","component","valueOf","add","DateComponent","dayStart","startOfDay","renderRange","viewEnd","addDays","OPTION_REFINERS","createFalsableFormatter","identity","input","injectStyles","index","createPlugin","name","optionRefiners","views","list","buttonTextKey","month","day","year","listDay","type","duration","days","weekday","listWeek","weeks","listMonth","listYear"],"sourceRoot":""}