{"version":3,"file":"static/js/3375.9fd6995e.chunk.js","mappings":"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","sources":["Layouts/PageHeader/PageHeader.module.scss","Layouts/PageHeader/PageHeader.jsx","components/Whitelist/style.module.scss","components/Whitelist/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport styles from './PageHeader.module.scss';\nimport { Breadcrumb } from 'react-bootstrap';\n\nconst PageHeader = (props) => {\n\n  return (\n\n    <div className={styles.PageHeader}>\n      {/* <!-- PAGE-HEADER --> */}\n      <div className=\"page-header\">\n        <h1 className=\"page-title\">{props.titles}</h1>\n        <div>\n          <Breadcrumb>\n          {props.items.map((value, index) => {\n          return<Breadcrumb.Item href=\"#\" key={index}>{value}</Breadcrumb.Item>\n        })}\n        <Breadcrumb.Item href=\"#\" active>{props.active}</Breadcrumb.Item>\n          </Breadcrumb>\n        </div>\n      </div>\n      {/* <!-- PAGE-HEADER END --> */}\n    </div>\n  )\n};\n\nexport default PageHeader;\n","// extracted by mini-css-extract-plugin\nexport default {};","import React, { Fragment, useState } from \"react\";\r\nimport styles from \"./style.module.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PageHeader from \"../../Layouts/PageHeader/PageHeader\";\r\nimport {\r\n  Col,\r\n  Row,\r\n  Card,\r\n  Button,\r\n  Tab,\r\n  Nav,\r\n  Tabs,\r\n  ListGroupItem,\r\n  ListGroup,\r\n  Form,\r\n  Modal,\r\n} from \"react-bootstrap\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n// Add New Row with Edit Table\r\nconst Savetable = () => {\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const data = [\r\n    {\r\n      id: 1,\r\n      date: \"2023/2/21\",\r\n      address: \"8.8.8.*\",\r\n    },\r\n    {\r\n      id: 2,\r\n      date: \"2023/2/22\",\r\n      address: \"8.8.*.8\",\r\n    },\r\n  ];\r\n  const [contacts, setContacts] = useState(data);\r\n  const [addFormData, setAddFormData] = useState({\r\n    date: \"\",\r\n    address: \"\",\r\n  });\r\n\r\n  const [editFormData, setEditFormData] = useState({\r\n    date: \"\",\r\n    address: \"\",\r\n  });\r\n\r\n  const [editContactId, setEditContactId] = useState(null);\r\n\r\n  const handleAddFormChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    const fieldName = event.target.getAttribute(\"name\");\r\n    const fieldValue = event.target.value;\r\n\r\n    const newFormData = { ...addFormData };\r\n    newFormData[fieldName] = fieldValue;\r\n\r\n    setAddFormData(newFormData);\r\n  };\r\n\r\n  const handleEditFormChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    const fieldName = event.target.getAttribute(\"name\");\r\n    const fieldValue = event.target.value;\r\n\r\n    const newFormData = { ...editFormData };\r\n    newFormData[fieldName] = fieldValue;\r\n\r\n    setEditFormData(newFormData);\r\n  };\r\n\r\n  const handleAddFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const newContact = {\r\n      id: nanoid(),\r\n      date: addFormData.date,\r\n      address: addFormData.address,\r\n    };\r\n\r\n    const newContacts = [...contacts, newContact];\r\n    setContacts(newContacts);\r\n  };\r\n\r\n  const handleEditFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const editedContact = {\r\n      id: editContactId,\r\n      date: editFormData.date,\r\n      address: editFormData.address,\r\n    };\r\n\r\n    const newContacts = [...contacts];\r\n\r\n    const index = contacts.findIndex((contact) => contact.id === editContactId);\r\n\r\n    newContacts[index] = editedContact;\r\n\r\n    setContacts(newContacts);\r\n    setEditContactId(null);\r\n  };\r\n\r\n  const handleEditClick = (event, contact) => {\r\n    event.preventDefault();\r\n    setEditContactId(contact.id);\r\n\r\n    const formValues = {\r\n      date: contact.date,\r\n      address: contact.address,\r\n    };\r\n\r\n    setEditFormData(formValues);\r\n  };\r\n\r\n  const handleCancelClick = () => {\r\n    setEditContactId(null);\r\n  };\r\n\r\n  const handleDeleteClick = (contactId) => {\r\n    const newContacts = [...contacts];\r\n\r\n    const index = contacts.findIndex((contact) => contact.id === contactId);\r\n\r\n    newContacts.splice(index, 1);\r\n\r\n    setContacts(newContacts);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container table-responsive\">\r\n      <form onSubmit={handleEditFormSubmit}>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"btn btn-secondary mb-3\"\r\n          onClick={() => setModalShow(true)}\r\n        >\r\n          Add IP Address\r\n        </Button>\r\n        <table\r\n          id=\"delete-datatable\"\r\n          className=\"table table-bordered text-nowrap border-bottom\"\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>DATE</th>\r\n              <th>IP ADDRESS</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {contacts.map((contact) => (\r\n              <Fragment key={contact.id}>\r\n                {editContactId === contact.id ? (\r\n                  <EditableRow\r\n                    editFormData={editFormData}\r\n                    handleEditFormChange={handleEditFormChange}\r\n                    handleCancelClick={handleCancelClick}\r\n                  />\r\n                ) : (\r\n                  <ReadOnlyRow\r\n                    contact={contact}\r\n                    handleEditClick={handleEditClick}\r\n                    handleDeleteClick={handleDeleteClick}\r\n                  />\r\n                )}\r\n              </Fragment>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </form>\r\n      <Modal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Add IP Address\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"btn btn-close\"\r\n            onClick={() => setModalShow(false)}\r\n          ></Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={handleAddFormSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              name=\"date\"\r\n              required\r\n              placeholder=\"Enter a ip address...\"\r\n              onChange={handleAddFormChange}\r\n              className=\"form-control mb-2\"\r\n            />\r\n            <Button variant=\"\" className=\"btn btn-primary me-2\" type=\"submit\">\r\n              Add\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            className=\"btn btn-primary\"\r\n            onClick={() => setModalShow(false)}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\nconst EditableRow = ({\r\n  editFormData,\r\n  handleEditFormChange,\r\n  handleCancelClick,\r\n}) => {\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"date\"\r\n          required\r\n          placeholder=\"Enter start date...\"\r\n          name=\"date\"\r\n          value={editFormData.date}\r\n          onChange={handleEditFormChange}\r\n        />\r\n      </td>\r\n      <td>\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          required\r\n          placeholder=\"Enter an ip address...\"\r\n          name=\"address\"\r\n          value={editFormData.address}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <Button variant=\"\" className=\"btn btn-primary me-1\" type=\"submit\">\r\n          Save\r\n        </Button>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"btn btn-danger me-1\"\r\n          onClick={handleCancelClick}\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\nconst ReadOnlyRow = ({ contact, handleEditClick, handleDeleteClick }) => {\r\n  return (\r\n    <tr>\r\n      <td>{contact.date}</td>\r\n      <td>{contact.address}</td>\r\n      <td>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"btn btn-primary me-1\"\r\n          type=\"button\"\r\n          onClick={(event) => handleEditClick(event, contact)}\r\n        >\r\n          Edit\r\n        </Button>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"btn btn-danger me-1\"\r\n          type=\"button\"\r\n          onClick={() => handleDeleteClick(contact.id)}\r\n        >\r\n          Delete\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst Whitelist = () => {\r\n  return (\r\n    <div className={styles.Whitelist}>\r\n      <PageHeader\r\n        titles=\"Whitelist Ips\"\r\n        active=\"Whitelist Ips\"\r\n        items={[\"Home\"]}\r\n      />\r\n      \r\n      <Card>\r\n        <Card.Body>\r\n          <Savetable />\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Whitelist;\r\n"],"names":["props","className","styles","titles","Breadcrumb","items","map","value","index","href","active","Savetable","React","modalShow","setModalShow","useState","id","date","address","contacts","setContacts","addFormData","setAddFormData","editFormData","setEditFormData","editContactId","setEditContactId","handleEditFormChange","event","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","handleEditClick","contact","formValues","handleCancelClick","handleDeleteClick","contactId","newContacts","findIndex","splice","onSubmit","editedContact","Button","variant","onClick","Fragment","EditableRow","ReadOnlyRow","Modal","show","onHide","size","centered","Form","newContact","nanoid","type","name","required","placeholder","onChange","PageHeader","Card"],"sourceRoot":""}