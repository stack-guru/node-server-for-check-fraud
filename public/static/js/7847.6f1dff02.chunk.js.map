{"version":3,"file":"static/js/7847.6f1dff02.chunk.js","mappings":"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","sources":["Layouts/PageHeader/PageHeader.module.scss","Layouts/PageHeader/PageHeader.jsx","components/UserManagement/style.module.scss","components/UserManagement/components/UserTable.jsx","components/UserManagement/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport styles from './PageHeader.module.scss';\nimport { Breadcrumb } from 'react-bootstrap';\n\nconst PageHeader = (props) => {\n\n  return (\n\n    <div className={styles.PageHeader}>\n      {/* <!-- PAGE-HEADER --> */}\n      <div className=\"page-header\">\n        <h1 className=\"page-title\">{props.titles}</h1>\n        <div>\n          <Breadcrumb>\n          {props.items.map((value, index) => {\n          return<Breadcrumb.Item href=\"#\" key={index}>{value}</Breadcrumb.Item>\n        })}\n        <Breadcrumb.Item href=\"#\" active>{props.active}</Breadcrumb.Item>\n          </Breadcrumb>\n        </div>\n      </div>\n      {/* <!-- PAGE-HEADER END --> */}\n    </div>\n  )\n};\n\nexport default PageHeader;\n","// extracted by mini-css-extract-plugin\nexport default {};","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Form, Modal } from \"react-bootstrap\";\r\nimport { nanoid } from \"nanoid\";\r\nimport Select from 'react-select';\r\nimport { getUsers } from \"../../../Slices/userSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n\r\nconst roleOptions = [\r\n  { value: 'admin', label: 'admin'},\r\n  { value: 'user', label: 'user'},\r\n];\r\n\r\n// Add New Row with Edit Table\r\nconst UserTable = () => {\r\n  const dispatch = useDispatch();\r\n  const { users, currentUser } = useSelector((o) => o.user);\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setContacts(users.map(e => {\r\n        return {\r\n            id: e._id,\r\n            name: e.name,\r\n            email: e.email,\r\n            role: e.role\r\n        }\r\n    }))\r\n  }, [users])\r\n\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  \r\n  const [contacts, setContacts] = useState([]);\r\n  const [addFormData, setAddFormData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    role: \"\",\r\n  });\r\n\r\n  const [editFormData, setEditFormData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    role: \"\",\r\n  });\r\n\r\n  const [editContactId, setEditContactId] = useState(null);\r\n\r\n  const handleAddFormChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    const fieldName = event.target.getAttribute(\"name\");\r\n    const fieldValue = event.target.value;\r\n\r\n    const newFormData = { ...addFormData };\r\n    newFormData[fieldName] = fieldValue;\r\n\r\n    setAddFormData(newFormData);\r\n  };\r\n\r\n  const handleEditFormChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    const fieldName = event.target.getAttribute(\"name\");\r\n    const fieldValue = event.target.value;\r\n\r\n    const newFormData = { ...editFormData };\r\n    newFormData[fieldName] = fieldValue;\r\n\r\n    setEditFormData(newFormData);\r\n  };\r\n\r\n  const handleRoleChange = (e) => {\r\n    const newFormData = { ...editFormData };\r\n    newFormData['role'] = e.value;\r\n\r\n    setEditFormData(newFormData);\r\n  }\r\n\r\n  const handleAddFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const newContact = {\r\n      id: nanoid(),\r\n      name: addFormData.name,\r\n      email: addFormData.email,\r\n      role: addFormData.role,\r\n    };\r\n\r\n    const newContacts = [...contacts, newContact];\r\n    setContacts(newContacts);\r\n  };\r\n\r\n  const handleEditFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const editedContact = {\r\n      id: editContactId,\r\n      name: editFormData.name,\r\n      email: editFormData.email,\r\n      role: editFormData.role,\r\n    };\r\n\r\n    const newContacts = [...contacts];\r\n\r\n    const index = contacts.findIndex((contact) => contact.id === editContactId);\r\n\r\n    newContacts[index] = editedContact;\r\n\r\n    setContacts(newContacts);\r\n    setEditContactId(null);\r\n  };\r\n\r\n  const handleEditClick = (event, contact) => {\r\n    event.preventDefault();\r\n    setEditContactId(contact.id);\r\n\r\n    const formValues = {\r\n      name: contact.name,\r\n      email: contact.email,\r\n      role: contact.salary,\r\n    };\r\n\r\n    setEditFormData(formValues);\r\n  };\r\n\r\n  const handleCancelClick = () => {\r\n    setEditContactId(null);\r\n  };\r\n\r\n  const handleDeleteClick = (contactId) => {\r\n    const newContacts = [...contacts];\r\n\r\n    const index = contacts.findIndex((contact) => contact.id === contactId);\r\n\r\n    newContacts.splice(index, 1);\r\n\r\n    setContacts(newContacts);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <form onSubmit={handleEditFormSubmit}>\r\n        <table\r\n          id=\"delete-datatable\"\r\n          className=\"table table-bordered text-nowrap border-bottom\"\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Email</th>\r\n              <th>Role</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {contacts.map((contact) => (\r\n              <Fragment key={contact.id}>\r\n                {editContactId === contact.id ? (\r\n                  <EditableRow\r\n                    editFormData={editFormData}\r\n                    handleEditFormChange={handleEditFormChange}\r\n                    handleCancelClick={handleCancelClick}\r\n                    handleRoleChange={handleRoleChange}\r\n                  />\r\n                ) : (\r\n                  <ReadOnlyRow\r\n                    contact={contact}\r\n                    handleEditClick={handleEditClick}\r\n                    handleDeleteClick={handleDeleteClick}\r\n                  />\r\n                )}\r\n              </Fragment>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </form>\r\n      <Modal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Add New Row\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"btn btn-close\"\r\n            onClick={() => setModalShow(false)}\r\n          ></Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={handleAddFormSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              name=\"fullName\"\r\n              required\r\n              placeholder=\"Enter a name...\"\r\n              onChange={handleAddFormChange}\r\n              className=\"form-control mb-2\"\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              name=\"position\"\r\n              required\r\n              placeholder=\"Enter an addres...\"\r\n              onChange={handleAddFormChange}\r\n              className=\"form-control mb-2\"\r\n            />\r\n            {/* <input\r\n                type=\"date\"\r\n                name=\"Start Date\"\r\n                required\r\n                \r\n                onChange={handleAddFormChange}\r\n                className=\"form-control mb-2\"\r\n              /> */}\r\n            <input\r\n              type=\"number\"\r\n              name=\"salary\"\r\n              required\r\n              placeholder=\"Enter a phone number...\"\r\n              onChange={handleAddFormChange}\r\n              className=\"form-control mb-2\"\r\n            />\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              required\r\n              placeholder=\"Enter an email...\"\r\n              onChange={handleAddFormChange}\r\n              className=\"form-control mb-2\"\r\n            />\r\n            <Button variant=\"\" className=\"btn btn-primary me-2\" type=\"submit\">\r\n              Add\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            className=\"btn btn-primary\"\r\n            onClick={() => setModalShow(false)}\r\n          >\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\nconst EditableRow = ({\r\n  editFormData,\r\n  handleEditFormChange,\r\n  handleCancelClick,\r\n  handleRoleChange\r\n}) => {\r\n  return (\r\n    <tr>\r\n      <td>\r\n        {editFormData.name}\r\n      </td>\r\n      <td>\r\n        {editFormData.email}\r\n      </td>\r\n      <td>\r\n        <Select \r\n          options={roleOptions}\r\n          placeholder=\"role\"\r\n          onChange={handleRoleChange}\r\n        />\r\n      </td>\r\n      <td>\r\n        <Button variant=\"\" className=\"btn btn-primary me-1\" type=\"submit\">\r\n          Save\r\n        </Button>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"btn btn-danger me-1\"\r\n          onClick={handleCancelClick}\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\nconst ReadOnlyRow = ({ contact, handleEditClick, handleDeleteClick }) => {\r\n  return (\r\n    <tr>\r\n      <td>{contact.name}</td>\r\n      <td>{contact.email}</td>\r\n      <td>{contact.role}</td>\r\n      <td>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"btn btn-primary me-1\"\r\n          type=\"button\"\r\n          onClick={(event) => handleEditClick(event, contact)}\r\n        >\r\n          Edit\r\n        </Button>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"btn btn-danger me-1\"\r\n          type=\"button\"\r\n          onClick={() => handleDeleteClick(contact.id)}\r\n        >\r\n          Delete\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default UserTable;\r\n","import React, { useEffect } from \"react\";\r\nimport styles from \"./style.module.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PageHeader from \"../../Layouts/PageHeader/PageHeader\";\r\nimport { Col, Row, Card } from 'react-bootstrap';\r\n// import { BasicEditTable, Savetable } from '../../Data/Pages/TablesData/DataEditable';\r\nimport UserTable from \"./components/UserTable\";\r\n\r\nconst UserManagement = () => {\r\n\r\n  return (\r\n    <div className={styles.userManagement}>\r\n      <PageHeader\r\n        titles=\"User Management\"\r\n        active=\"User Management\"\r\n        items={[\"Home\"]}\r\n      />\r\n\r\n      {/* <!-- Row --> */}\r\n      <div className=\"row\">\r\n        <Col lg={12}>\r\n          <Card>\r\n            {/* <Card.Header>\r\n              <Card.Title as=\"h3\">Add New Row with Edit Table</Card.Title>\r\n            </Card.Header> */}\r\n            <Card.Body>\r\n              <UserTable />\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </div>\r\n      {/* <!-- End Row --> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserManagement;\r\n"],"names":["props","className","styles","titles","Breadcrumb","items","map","value","index","href","active","roleOptions","label","EditableRow","editFormData","handleCancelClick","handleEditFormChange","handleRoleChange","name","email","options","placeholder","onChange","Button","variant","type","onClick","ReadOnlyRow","contact","handleEditClick","handleDeleteClick","role","event","id","dispatch","useDispatch","useSelector","o","user","users","currentUser","useEffect","getUsers","setContacts","e","_id","React","modalShow","setModalShow","useState","contacts","addFormData","setAddFormData","setEditFormData","editContactId","setEditContactId","handleAddFormChange","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","formValues","salary","contactId","newContacts","findIndex","splice","onSubmit","editedContact","Fragment","Modal","show","onHide","size","centered","Form","newContact","nanoid","required","PageHeader","Col","lg","Card"],"sourceRoot":""}